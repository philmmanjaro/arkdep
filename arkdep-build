#!/usr/bin/env bash

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

# Print manual if no parameters provided or invalid amount of parameters is provided
if [[ ! -n $1 || -n $3 ]]; then
	cat <<- END
	Usage: arkdep-build [variant] [type]
	Variants:
	  manjaro		Plain Manjaro TTY image

	Variants are loaded based on their directory names, the ones listed here
	 are included by default.

	Types:
	  btrfs	[default]	use tmp btrfs subvolumes to create the images
	  img			images will be deployed to an image


	Variables:
	  ARKDEP_NO_TAR			Do not create a compressed tarball, only create the images
	  ARKDEP_CUSTOM_NAME		Define a custom image name
	  ARKDEP_OUTPUT_TARGET		Overwrite location to which images will be written
	  ARKDEP_CONFIGS		Define directory in which build will search for configuration files
	  ARKDEP_NO_CLEANUP		Do not remove the temporary rootfs upon error or exit
	  ARKDEP_STATIC_WORKDIR		Reset workdir back to workable state if still present
	END
	exit 0
fi

## Common functions
#
## Umount image
_umount_img() {
    local _loopdevice
    _loopdevice="$(losetup -ln -O name -j "${output_target}/${image_name}.img")"
    if mountpoint -q -- "${worktmp}/imgp1"; then
        umount -l "${worktmp}/imgp1"
    fi
    if mountpoint -q -- "${worktmp}/imgp2"; then
        umount -l "${worktmp}/imgp2"
    fi
    if [[ -n "${_loopdevice}" ]]; then
        losetup -d "${_loopdevice}"
    fi
}

# Cleanup and quit if error
cleanup_and_quit () {
	# If any paramters are passed we will assume it to be an error
	[[ -n $1 ]] && printf "\e[1;31m<#>\e[0m $*\e[0m\n" >&2

	if [[ $ARKDEP_NO_CLEANUP -eq 1 ]]; then
		printf 'Cleanup disabled, not running cleanup\n'
		exit 1
	fi

	umount -l $workdir

	btrfs property set -ts $workdir ro false
	btrfs property set -ts $workdir/etc ro false
	btrfs property set -ts $workdir/var ro false

	# Remove temporary btrfs volumes
	rm -rf $workdir/etc \
		$workdir/var \
		$workdir
        
	# Quit program if argument provided to function
	if [[ -n $1 ]]; then
		exit 1
	fi
}

# Create Image
_create_img() {
    trap _umount_img EXIT
    local _espsize _loopdevice

    rm -f -- "${output_target}/${image_name}.img"
    printf '\e[1;34m-->\e[0m\e[1m Creating GPT disk image\e[0m\n'
    
    _espsize=600
    [[ -z ${_rootlabel} ]] && _rootlabel=manjaro_root
    [[ -z ${_esplabel} ]] && _esplabel=manjaro_esp

    # IMG size = 20 GiB
    # Create IMG file
    truncate -s 20G "${output_target}/${image_name}.img"

    # GPT partitions
    _loopdevice=$(losetup -f --show "${output_target}/${image_name}.img" 2> /dev/null || \
                  { echo 'Failed to create loop device'; exit 1; } )
    if ! echo 'label: gpt' | udevadm lock --device="${_loopdevice}" -- \
            sfdisk -W always -- "${_loopdevice}" &> /dev/null; then
        echo 'Failed to create new gpt partition table!'
        exit 1
    fi
    sleep 3
    partprobe -- "${_loopdevice}"

    if ! echo -e ",${_espsize}MiB,EBD0A0A2-B9E5-4433-87C0-68B6B72699C7,\n,+,L,\n" | \
            udevadm lock --device="${_loopdevice}" -- sfdisk --append  -W always -- "${_loopdevice}" &> /dev/null; then
        echo 'Failed to create partitions!'
        exit 1
    fi
    sleep 3
    partprobe -- "${_loopdevice}"

    if ! udevadm lock --device="${_loopdevice}p1" -- \
            mkfs.fat -F32 -n "${_esplabel}" -- "${_loopdevice}p1" &> /dev/null; then
        echo 'Formating partition #1 failed!'
        exit 1
    fi
    if ! udevadm lock --device="${_loopdevice}p2" -- \
            mkfs.btrfs -L "${_rootlabel}" -q -- "${_loopdevice}p2" &> /dev/null; then
        echo 'Formating partition #2 failed!'
        exit 1
    fi

    printf '\e[1;34m-->\e[0m\e[1m Mounting partitions\e[0m\n'
    # Mount partitions
    install -d -m 0755 -- "${worktmp}/imgp1"
    install -d -m 0755 --  "${worktmp}/imgp2"
    mount -- "${_loopdevice}p1" "${worktmp}/imgp1"
    mount -- "${_loopdevice}p2" "${worktmp}/imgp2"
}

## Set common variables
#
declare -r variant="$1"
declare -r imgtype="$2"
declare -r worktmp='/var/tmp'

if [[ "$imgtype" == 'img' ]]; then
	# Change workdir to BTRS partition
	declare -r workdir="${worktmp}/imgp2/rootfs"
else
	declare -r workdir="${worktmp}/rootfs"
fi

if [[ -v ARKDEP_CONFIGS ]]; then
	declare -r configsdir="$ARKDEP_CONFIGS"
else
	declare -r configsdir="$(readlink -m ./arkdep-build.d/)"
fi

# Before we continue setting variables, lets first ensure the configsdir actually exist
# We do this now to give better error reporting to the user
if [[ ! -d $configsdir ]]; then
	printf "\e[1;31m<#>\e[0m\e[1m $configsdir does not exist, are you located inside of the configuration directory's parent directory?\n\e[0m"
	exit 1
fi

declare -r variantdir="$configsdir/$variant"
declare -r type="$(cat $(readlink -m $variantdir/type) 2> /dev/null || (printf '\e[1;31m<#>\e[0m\e[1m Failed to get build type\n\e[0m'; exit 1))"

if [[ -v ARKDEP_OUTPUT_TARGET ]]; then
	declare -r output_target="$ARKDEP_OUTPUT_TARGET"
else
	declare -r output_target="$(pwd)/target/"
fi

## Set common functions
#
# Generate a 42 character long random string, used for generating psuedo-random image names
# Unless overwritten with $ARKDEP_CUSTOM_NAME
gen_random_string () {

	if [[ -v ARKDEP_CUSTOM_NAME ]]; then
		random=$ARKDEP_CUSTOM_NAME
	else
		random=$(openssl rand -hex 100 | head -c 42)
	fi

	printf "${random}\n"

}

declare -r image_name=$(gen_random_string)

## Error checking
#
# Quit if not root
if [[ ! $EUID -eq 0 ]]; then
	printf '\e[1;31m<#>\e[0m\e[1m This program has to be run as root\n\e[0m'
	exit 1
fi

# Check if all dependencies are installed, quit if not
for prog in btrfs pacstrap; do
	if ! command -v $prog > /dev/null; then
		printf "\e[1;31m<#>\e[0m\e[1m Failed to locate $prog, ensure it is installed\e[0m\n"
		exit 1
	fi
done

# Check if requested variant exists
if [[ ! -d $variantdir ]]; then
	printf '\e[1;31m<#>\e[0m\e[1m The requested variant does not exist\e[0m\n'
	exit 1
fi

## Variants
#
# Build migration type image
if [[ $type == 'migration' ]]; then

	printf '\e[1;34m-->\e[0m\e[1m Started migration image build\e[0m\n'

	# Create output directory structure
	mkdir -p $output_target/$image_name

	# Copy migration contents to compression target dir
	cp -v $variantdir/migration.sh $output_target/$image_name/$image_name-migration.sh ||
		cleanup_and_quit 'No primary migration script found'

	# Copy migration related files if they are provided
	if [[ -d $variantdir/migration ]]; then
		cp -rv $variantdir/migration $output_target/$image_name/$image_name-migration
	fi

	# Compress migration files
	tar -cv -I 'zstd -12 -T0 ' -f $output_target/$image_name.tar.zst -C $output_target/$image_name .

	# We can just exit, no need to do a cleanup
	exit 0

fi

# Build manjaro type image
if [[ $type == 'manjaro' ]]; then

	# Ensure bootstrap.list exists, if not error and quit
	if [[ ! -e $variantdir/bootstrap.list ]]; then
		printf "\e[1;31m<#>\e[0m\e[1m The required file 'bootstrap.list' is not preset in $(readlink -m $variantdir)\e[0m\n"
		exit 1
	fi

	declare -r image_name=$(gen_random_string)
	printf "\e[1;34m-->\e[0m\e[1m Started Manjaro Linux ($image_name) image build\e[0m\n"

	# Create dir for storing the images
	mkdir -vp $(readlink -m $output_target/$image_name)

	# Allow user to reuse subvolumes for testing
	if [[ ! $ARKDEP_STATIC_WORKDIR -eq 1 ]] && [[ ! -d $workdir ]]; then
		[[ "$imgtype" == 'img' ]] && _create_img
		# Create temporary Btrfs subvolume
		printf "\e[1;34m-->\e[0m\e[1m Creating temporary Btrfs subvolumes at $(readlink -m $workdir)\e[0m\n"
		btrfs subvolume create $workdir || cleanup_and_quit "Failed to create btrfs subvolume $(readlink -m $workdir)"
		btrfs subvolume create $workdir/etc || cleanup_and_quit "Failed to create btrfs subvolume $(readlink -m $workdir/etc)"
		btrfs subvolume create $workdir/var || cleanup_and_quit "Failed to create btrfs subvolume $(readlink -m $workdir/var)"
	elif [[ ! $ARKDEP_STATIC_WORKDIR -eq 1 ]]; then
		cleanup_and_quit "Failed to create btrfs subvolume $workdir for it already exists"
	else
		printf "\e[1;34m-->\e[0m\e[1m Returning $(readlink -m $workdir) to a workable state, this should be done for testing only\e[0m\n"

		# Get the rootfs working again, this should only be done for testing
		for file in passwd group shadow; do
			mv $workdir/usr/lib/$file $workdir/etc/$file
		done

		btrfs property set -ts $workdir ro false || cleanup_and_quit 'Failed to set root to read-only'
		btrfs property set -ts $workdir/etc ro false || cleanup_and_quit 'Failed to set etc to read-only'
		btrfs property set -ts $workdir/var ro false || cleanup_and_quit 'Failed to set var to read-only'

		echo 'root:x:0:0::/root:/bin/bash' | tee -a $workdir/etc/passwd
		echo 'root:x:0:root' | tee -a $workdir/etc/group
		echo 'root:!::::::' | tee -a $workdir/etc/shadow

		rm $workdir/var/usr/local
		mv $workdir/var/usrlocal $workdir/usr/local

		rm $workdir/usr/lib/locale
		mv $workdir/var/usrliblocale $workdir/usr/lib/locale

		rm $workdir/opt
		mv $workdir/var/opt $workdir/opt

		# srv symlink
		rm $workdir/srv
		mv $workdir/var/srv $workdir/srv

		# mnt symlink
		rm $workdir/mnt
		mv $workdir/var/mnt $workdir/mnt
	fi

	printf "\e[1;34m-->\e[0m\e[1m Creating bind mount at $(readlink -m $workdir)\e[0m\n"
	mount --bind $workdir $workdir

	# Read base package list and install base system
	readarray bootstrap_packages < $variantdir/bootstrap.list
	printf '\e[1;34m-->\e[0m\e[1m Installing base packages\e[0m\n'
	# If pacman.conf is available in overlay, use it
	if [[ -f $variantdir/pacman.conf ]]; then
		pacstrap -c -C $variantdir/pacman.conf $workdir ${bootstrap_packages[*]} || cleanup_and_quit 'Failed to install secondary package list'
		cp -v $variantdir/pacman.conf $workdir/etc/pacman.conf
	else
		pacstrap -c $workdir ${bootstrap_packages[*]} || cleanup_and_quit 'Failed to install secondary package list'
	fi

	# If overlay directory exists in variant copy it's contents to the temporary subvolume
	if [[ -d $variantdir/overlay/post_bootstrap ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Copying overlay/post_bootstrap to root\e[0m\n'
		cp -rv $variantdir/overlay/post_bootstrap/* $workdir/
	fi

	# Run post_bootstrap script if exists
	if [[ -f $variantdir/extensions/post_bootstrap.sh ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Running post_bootstrap extension\e[0m\n'
		(source $variantdir/extensions/post_bootstrap.sh)
	fi

	# Read package list and install secondary system components, skip if not used
	if [[ -e $variantdir/package.list ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Installing secondary packages\e[0m\n'

		# Mount the pacman cache
		mount --bind /var/cache/pacman/pkg $workdir/var/cache/pacman/pkg

		# Read package list and install
		readarray packages < $variantdir/package.list
		arch-chroot $workdir pacman -S --noconfirm ${packages[*]} || cleanup_and_quit 'Failed to install base packages'

		# Unmount pacman cache
		umount -l $workdir/var/cache/pacman/pkg
	fi

	# If postinstall overlay directory exists in variant copy it's contents to the temporary subvolume
	if [[ -d $variantdir/overlay/post_install ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Copying overlay/post_install to root\e[0m\n'
		cp -rv $variantdir/overlay/post_install/* $workdir/
	fi

	# Run post_install script if exists
	if [[ -f $variantdir/extensions/post_install.sh ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Running post_install extension\e[0m\n'
		(source $variantdir/extensions/post_install.sh)
	fi

	# Clear pacman cache
	printf '\e[1;34m-->\e[0m\e[1m Clearing pacman cache\e[0m\n'
	arch-chroot $workdir pacman -Scc <<< Y <<< Y
	# Insert a new line to clean, the previous command fails to do so
	printf '\n'

	# Remove subvolumes created by systemd
	[[ -d $workdir/var/lib/portables ]] &&
		printf '\e[1;34m-->\e[0m\e[1m Removing systemd subvolume var/lib/portables\e[0m\n'
		btrfs subvolume delete $workdir/var/lib/portables
	[[ -d $workdir/var/lib/machines ]] &&
		printf '\e[1;34m-->\e[0m\e[1m Removing systemd subvolume var/lib/machines\e[0m\n'
		btrfs subvolume delete $workdir/var/lib/machines

	# Make /usr/local symlink in var
	printf '\e[1;34m-->\e[0m\e[1m Moving dirs to var and creating symlinks\e[0m\n'
	mv $workdir/usr/local $workdir/var/usrlocal || cleanup_and_quit 'Failed to move usr/local to var/usrlocal'
	ln -sv ../var/usrlocal $workdir/usr/local || cleanup_and_quit 'Failed to create usrlocal symlink'

	# locale symlink
	mv $workdir/usr/lib/locale $workdir/var/usrliblocale || cleanup_and_quit 'Failed to move usr/local to var/usrlocal'
	ln -sv ../../../var/usrliblocale $workdir/usr/lib/locale || cleanup_and_quit 'Failed to create usrlocal symlink'

	# Opt symlink
	mv $workdir/opt $workdir/var/ || cleanup_and_quit 'Failed to move opt to var/opt'
	ln -sv var/opt $workdir/opt || cleanup_and_quit 'Failed to create opt symlink'

	# srv symlink
	mv $workdir/srv $workdir/var/srv || cleanup_and_quit 'Failed to move srv to var/srv'
	ln -sv var/srv $workdir/srv || cleanup_and_quit 'Failed to create srv symlink'

	# mnt symlink
	mv $workdir/mnt $workdir/var/mnt || cleanup_and_quit 'Failed to move mnt to var/mnt'
	ln -sv var/mnt $workdir/mnt || cleanup_and_quit 'Failed to create mnt symlink'

	# NetworkManager system-connections symlink if installed
	if [[ -d $workdir/etc/NetworkManager ]]; then
		mv $workdir/etc/NetworkManager/system-connections $workdir/var/nm-system-connections || cleanup_and_quit 'Failed to move etc/NetworkManager/system-connections to var/nm-system-connections'
		ln -sv ../../var/nm-system-connections $workdir/etc/NetworkManager/system-connections || cleanup_and_quit 'Failed to create nm-system-connections symlink'
	fi

	printf '\e[1;34m-->\e[0m\e[1m Creating mountpoints for shared subvolumes\e[0m\n'

	# Remove the folders to ensure they are empty
	rm -rf $workdir/root
	rm -rf $workdir/var/lib/flatpak

	# Ensure these folder exist
	mkdir -pv $workdir/root
	mkdir -pv $workdir/arkdep
	mkdir -pv $workdir/var/lib/flatpak

	printf '\e[1;34m-->\e[0m\e[1m Moving passwd, shadow and group files to usr/lib\e[0m\n'

	# Create second passwd, group and shadow file in usr/lib and configure
	for file in passwd group shadow; do
		grep -v "^root:" $workdir/etc/$file > $workdir/usr/lib/$file
	done

	# Remove all users except for root, is typically overwritten by user overlay but
	# may be used during os installation as a template
	for file in passwd group shadow; do
		grep "^root:" $workdir/etc/$file > $workdir/etc/$file-tmp
		mv $workdir/etc/$file-tmp $workdir/etc/$file
	done

	# Ensure passwd/group/shadow permissions are set properly
	chmod 600 $workdir/etc/shadow $workdir/usr/lib/shadow
	chmod 644 $workdir/etc/{passwd,group} $workdir/usr/lib/{passwd,group}

	#
	# nss-switch.conf is added using the overlay
	#

	# Remove passwd/group/shadow backup files
	rm $workdir/etc/{passwd-,shadow-,group-}

	printf '\e[1;34m-->\e[0m\e[1m Moving CPU microcode to usr/lib\e[0m\n'
	# Move CPU firmware to /usr/lib if present
	mv $workdir/boot/*-ucode.img $workdir/usr/lib/

	# Make subvolume read-only
	printf '\e[1;34m-->\e[0m\e[1m Adding read-only property to subvolumes\e[0m\n'
	btrfs property set -ts $workdir ro true || cleanup_and_quit 'Failed to set root to read-only'
	btrfs property set -ts $workdir/etc ro true || cleanup_and_quit 'Failed to set etc to read-only'
	btrfs property set -ts $workdir/var ro true || cleanup_and_quit 'Failed to set var to read-only'

	# Create dir for storing the images
	mkdir -p $output_target/$image_name

	# Write subvolume to image
	printf '\e[1;34m-->\e[0m\e[1m Creating images\e[0m\n'
	btrfs send -f $output_target/$image_name/$image_name-rootfs.img $workdir
	btrfs send -f $output_target/$image_name/$image_name-etc.img $workdir/etc
	btrfs send -f $output_target/$image_name/$image_name-var.img $workdir/var

	if [[ ! -v ARKDEP_NO_TAR ]]; then
		printf '\e[1;34m-->\e[0m\e[1m Compressing images\e[0m\n'
		tar -cv -I 'zstd -12 -T0 ' -f $output_target/$image_name.tar.zst -C $output_target/$image_name .
	fi

	cleanup_and_quit

	if [[ "$imgtype" == 'img' ]]; then
		export ARKDEP_NO_BOOTCTL=1 ARKDEP_ROOT=${worktmp}/imgp2 ARKDEP_BOOT=${worktmp}/imgp1

		arkdep init

		cp -v $output_target/$image_name.tar.zst ${worktmp}/imgp2/arkdep/cache
		mkdir -p ${worktmp}/imgp1/loader/entries
		mkdir -p ${worktmp}/imgp1/EFI/{BOOT,systemd}

		# Run post-init script if exists
		if [[ -f $variantdir/extensions/post_init.sh ]]; then
			printf '\e[1;34m-->\e[0m\e[1m Running post-init extension\e[0m\n'
			(source $variantdir/extensions/post_init.sh)
		fi

		arkdep deploy cache $image_name
		# rm -v ${worktmp}/imgp2/arkdep/cache/$image_name.tar.zst

		btrfs filesystem mkswapfile --size 6G ${worktmp}/imgp2/arkdep/shared/var/swapfile

		cp ${worktmp}/imgp2/arkdep/deployments/$image_name/rootfs/usr/lib/systemd/boot/efi/systemd-bootx64.efi \
		${worktmp}/imgp1/EFI/systemd
		cp ${worktmp}/imgp2/arkdep/deployments/$image_name/rootfs/usr/lib/systemd/boot/efi/systemd-bootx64.efi \
		${worktmp}/imgp1/EFI/BOOT/BOOTx64.EFI
		echo 'timeout 0' > ${worktmp}/imgp1/loader/loader.conf
		echo "default $image_name.conf" >> ${worktmp}/imgp1/loader/loader.conf

		_umount_img
		rm -rf "${worktmp}/imgp1" \
        		"${worktmp}/imgp2"
		sleep 2
		tar --transform 's/.*\///g' -cv -I 'zstd -12 -T0 ' -f "${output_target}/${image_name}.img.tar.zst" "${output_target}/${image_name}.img"
		sha256sum "${output_target}/${image_name}.img.tar.zst" > "${output_target}/${image_name}.img.tar.zst.sha256"
		sha256sum "${output_target}/${image_name}.img" > "${output_target}/${image_name}.img.sha256"
        fi
	exit 0
fi
